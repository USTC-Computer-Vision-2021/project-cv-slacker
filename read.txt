视频拼接工具：

功能：利用图像拼接技术，将两段视频进行首尾拼接，达到视频拼接或者视频转场的效果
原理：
1.在两段视频重合的区域（t1,t2），将两段视频对应的帧进行预处理，得到图像拼接所需的单应矩阵H
2.由于处理后的视频画面应当是连续的，所以对这一系列矩阵H做相应的处理（可以认为是平滑操作）
3.为了保证处理后视频画面的连续性，所以在图像拼接之后作裁剪，使得视频画面连续自然

一些细节：
1.单应矩阵：是描述blabla的视角变化和blabla。
在常规的图像拼接算法中，两个图像img1、img2在经过匹配之后得到一个对应的单应矩阵H，则拼接后的图像是来自于I*img1和H*img2的（I为单位矩阵）。实际含义为：保持img1的视角不变，将img2的视角进行调整，以匹配img1。
但为了保证视频拼接的连续性，所需的视角需要连续变化，也就是由第一个视频逐渐过渡到第二个视频。同时，画面中来自图像1的像素占比逐渐减小，来自图像2的像素占比逐渐增大。整体上，不管是视角变化还是像素占比的变化，都可以用一个权重a来描述。

当a=0时，视角和图像1的视角相同，且输出画面全部为图像1的画面
当a=1时，视角和图像2的视角相同，且输出画面全部为图像2的画面
当0<a<1时，视角在图像1和图像2之间，由a决定；输出画面是部分图像1和部分图像2的叠加，也由a决定

（这里可以写一下细节，就是矩阵是怎么样的两个矩阵）

2.预处理
当像素过高时，blabla算法中的特征点识别会将微小细节过度识别，为解决此问题，实际计算H矩阵时用到的是处理过后的低分辨率图像（此参数可调整）。这样在视频处理时忽略细节，在大多数情况下可以得到更有用的识别结果（可以举个例子）。同时，这也减小了运算量，提高速度
由于视频逐帧处理时，有可能在时间上存在抖动，这样输出的视频会有卡顿，因此对H矩阵进行平滑操作（可以列一些数学推导）

3.视频裁剪的策略
为了保证输出画面的取景框是比较连续的，所以需要对视频作出裁剪。
裁剪的参数有两个，一个是裁剪过画面的中心坐标，一个是裁剪画面的长（由于比例是固定的，所以确定画面长度以后就可以确定宽度）
中心坐标由画面1的中心坐标、画面2的中心坐标以及权重a来决定
裁剪画面的长度是这样确定的：
(1)以中心坐标为中心向外扩张取景框，直到无法扩张为止（即，碰到了黑边），得到一个预选的长度h0
(2)为了保证裁剪的连续性，对帧序列的h0平滑处理







